/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a,
    output reg b,
    output reg c,
    input sum,
    input carry
  );
  
  
  
  integer leda;
  integer ledb;
  integer ledc;
  
  integer button_a;
  integer button_b;
  integer button_c;
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  
  localparam IDLE_state = 4'd0;
  localparam A001R01_state = 4'd1;
  localparam A010R01_state = 4'd2;
  localparam A100R01_state = 4'd3;
  localparam A101R10_state = 4'd4;
  localparam A011R10_state = 4'd5;
  localparam A110R10_state = 4'd6;
  localparam A111R11_state = 4'd7;
  localparam PASS_state = 4'd8;
  localparam FAIL_state = 4'd9;
  localparam MANUAL_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    button_a = io_dip[0+0+0-:1];
    button_b = io_dip[0+1+0-:1];
    button_c = io_dip[0+2+0-:1];
    io_led[0+0+0-:1] = leda;
    io_led[0+1+0-:1] = ledb;
    io_led[0+2+0-:1] = ledc;
    io_led[8+0+0-:1] = sum;
    io_led[8+1+0-:1] = carry;
    a = 1'h0;
    b = 1'h0;
    c = 1'h0;
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_state_q)
      IDLE_state: begin
        leda = 1'h0;
        ledb = 1'h0;
        ledc = 1'h0;
        a = 1'h0;
        b = 1'h0;
        c = 1'h0;
        if (io_button[4+0-:1]) begin
          M_state_d = A001R01_state;
        end
        if (io_button[3+0-:1]) begin
          M_state_d = MANUAL_state;
        end
      end
      A001R01_state: begin
        leda = 1'h0;
        ledb = 1'h0;
        ledc = 1'h1;
        a = 1'h0;
        b = 1'h0;
        c = 1'h1;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h1 & carry == 1'h0) begin
            M_state_d = A010R01_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      A010R01_state: begin
        leda = 1'h0;
        ledb = 1'h1;
        ledc = 1'h0;
        a = 1'h0;
        b = 1'h1;
        c = 1'h0;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h1 & carry == 1'h0) begin
            M_state_d = A100R01_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      A100R01_state: begin
        leda = 1'h1;
        ledb = 1'h0;
        ledc = 1'h0;
        a = 1'h1;
        b = 1'h0;
        c = 1'h0;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h1 & carry == 1'h0) begin
            M_state_d = A011R10_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      A011R10_state: begin
        leda = 1'h0;
        ledb = 1'h1;
        ledc = 1'h1;
        a = 1'h0;
        b = 1'h1;
        c = 1'h1;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h0 & carry == 1'h1) begin
            M_state_d = A101R10_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      A101R10_state: begin
        leda = 1'h1;
        ledb = 1'h0;
        ledc = 1'h1;
        a = 1'h1;
        b = 1'h0;
        c = 1'h1;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h0 & carry == 1'h1) begin
            M_state_d = A110R10_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      A110R10_state: begin
        leda = 1'h1;
        ledb = 1'h1;
        ledc = 1'h0;
        a = 1'h1;
        b = 1'h1;
        c = 1'h0;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h0 & carry == 1'h1) begin
            M_state_d = A111R11_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      A111R11_state: begin
        leda = 1'h1;
        ledb = 1'h1;
        ledc = 1'h1;
        a = 1'h1;
        b = 1'h1;
        c = 1'h1;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h1 & carry == 1'h1) begin
            M_state_d = PASS_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      end
      PASS_state: begin
        io_led = 24'hffffff;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = IDLE_state;
        end
      end
      FAIL_state: begin
        io_led[0+7-:8] = {4'h8{M_counter_q[23+0-:1]}};
        io_led[8+7-:8] = {4'h8{M_counter_q[23+0-:1]}};
        io_led[16+7-:8] = {4'h8{M_counter_q[23+0-:1]}};
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = IDLE_state;
        end
      end
      MANUAL_state: begin
        led = 8'hff;
        leda = button_a;
        ledb = button_b;
        ledc = button_c;
        a = button_a;
        b = button_b;
        c = button_c;
        if (io_button[3+0-:1]) begin
          M_state_d = IDLE_state;
        end
        if (M_counter_q[23+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (carry * 2'h2 + sum != button_a + button_b + button_c) begin
            M_state_d = FAIL_state;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
